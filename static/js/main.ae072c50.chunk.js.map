{"version":3,"sources":["contexts/UserContext.js","components/button/overlay.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/table/table.component.jsx","components/button/switch-button.component.jsx","components/landing/landing.component.jsx","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","UserContextProvider","props","useState","name","setName","tech","setTech","date","setDate","matrix","setMatrix","isLoading","setIsLoading","setIsError","api","axios","create","baseURL","useEffect","a","get","result","data","then","names","year","map","res","Promise","all","fetchData","age","x","Death","push","moment","diff","Birth","len","length","element","JSON","stringify","Provider","value","toggleTheme","children","Overlay","OverlayTrigger","key","placement","overlay","Tooltip","id","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","UserTable","style","useContext","setSort","dataLen","onSort","event","sortKey","sortData","sort","b","localeCompare","render","Table","striped","bordered","hover","size","onHover","onClick","e","index","SwitchButton","Button","variant","LandingPage","landingStyle","background","color","height","overflow","tableStyle","display","justifyContent","margin","className","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae072c50.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nexport const UserContext = createContext()\r\n\r\nconst UserContextProvider = props => {\r\n\r\n    const [name, setName] = useState([]);\r\n    const [tech, setTech] = useState([]);\r\n    const [date, setDate] = useState([]);\r\n    const [matrix, setMatrix] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    const toggleTheme = () => (\r\n      matrix ? \r\n        setMatrix(false) :\r\n        setMatrix(true)\r\n    )\r\n\r\n    const api = axios.create({\r\n      baseURL: `http://78.63.13.74:3006/FlowFormaAPI`\r\n    })\r\n\r\n    const GetName = () => {\r\n        api.get('/names').then( result => {\r\n            const names = result.data;\r\n            setName(result.data)\r\n            const year = names.map( name => {\r\n                return api.get(`/getDate/${name}`).then( res => res.data)\r\n            })\r\n            Promise.all(year).then(data => {\r\n                setDate(data);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n      const fetchData = async() => {\r\n          setIsLoading(true);\r\n          try {\r\n              const result = await api.get('/tech')\r\n              setTech(result.data)\r\n              await GetName();\r\n          } catch (error){\r\n              setIsError(true);\r\n          }\r\n          setIsLoading(false);\r\n      } \r\n      fetchData();\r\n    }, []);\r\n\r\n    let age = []\r\n    date.map(x => \r\n      x.Death ?\r\n        age.push(moment(`${x.Death}`).diff(moment(`${x.Birth}`), 'years')) : \r\n        age.push(moment(moment()).diff(moment(`${x.Birth}`), 'years'))\r\n    )\r\n\r\n    var len = name.length;\r\n    var data = []\r\n    for (var x = 0; x < len; x++) {\r\n        var element = {\r\n          \"name\" : name[x],\r\n          \"tech\" : tech[x],\r\n          \"year\": age[x]\r\n        };\r\n        data.push(element);\r\n    }\r\n    JSON.stringify(data);\r\n    \r\n\r\n  return (\r\n    <UserContext.Provider\r\n      value={{\r\n        toggleTheme,\r\n        data,\r\n        isLoading,\r\n        date,\r\n        matrix\r\n      }}\r\n    >\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport default UserContextProvider","import React from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nconst Overlay = props => (\r\n    <OverlayTrigger\r\n    key=\"top\"\r\n    placement=\"top\"\r\n    overlay={\r\n      <Tooltip id='tooltip-top'>\r\n       Try to sort!\r\n      </Tooltip>\r\n    }\r\n  >\r\n  {props.children}\r\n  </OverlayTrigger>\r\n)\r\n\r\nexport default Overlay;","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { SpinnerContainer, SpinnerOverlay} from './spinner.styles';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer />\r\n    </SpinnerOverlay>\r\n)\r\n\r\nexport default Spinner;","import React, { useContext, Fragment, useState } from 'react';\r\nimport { UserContext } from \"../../contexts/UserContext\";\r\nimport { Table } from 'react-bootstrap';\r\nimport Overlay from '../button/overlay.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport moment from 'moment';\r\n\r\nconst UserTable = ({ style }) => {\r\n    const { data, isLoading, date } = useContext(UserContext);\r\n    const [sort, setSort] = useState([]);\r\n    const dataLen = date.length\r\n\r\n    const onSort = (event, sortKey) => {\r\n        const sortData = data;\r\n        sortData.sort((a,b) => a[sortKey].localeCompare(b[sortKey]))\r\n        setSort({sortData})\r\n      }\r\n\r\n    const render = isLoading || dataLen === 0 ? <Spinner /> \r\n    : <Table striped bordered hover size=\"sm\" style={style}>\r\n        <thead>\r\n            <tr>\r\n            <Overlay>\r\n                <th style={{ onHover: '' }} onClick={e => onSort(e, 'name')}>Name</th>\r\n            </Overlay>\r\n            <Overlay>\r\n                <th onClick={e => onSort(e, 'tech')}>Technology</th>\r\n            </Overlay>\r\n            <th>Age</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map((x, index) => (\r\n                <tr key={index}>\r\n                    <Fragment>\r\n                        <td>{x.name}</td>\r\n                        <td>{x.tech}</td>\r\n                        <td>{x.year}</td>\r\n                    </Fragment>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n        </Table>\r\n\r\n    return (\r\n        <div>{render}</div>\r\n    )\r\n  }\r\n\r\n  export default UserTable;","import React, {useContext} from 'react';\r\nimport { UserContext } from '../../contexts/UserContext';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst SwitchButton = () => {\r\n    const { matrix, toggleTheme } = useContext(UserContext);\r\n    const render = ( matrix ?\r\n        <Button variant=\"outline-success\" onClick={toggleTheme}>Normal</Button> :\r\n        <Button variant=\"outline-secondary\" onClick={toggleTheme}>Matrix</Button> )\r\n      \r\n    return(\r\n        <div>{render}</div>\r\n    )\r\n}\r\n\r\nexport default SwitchButton;","import React, {useContext} from 'react';\r\nimport { UserContext } from \"../../contexts/UserContext\";\r\nimport UserTable from '../table/table.component';\r\nimport SwitchButton from '../button/switch-button.component';\r\n\r\nconst LandingPage = () => {\r\n    const { matrix } = useContext(UserContext);\r\n\r\n    const landingStyle = matrix ? {\r\n        background: 'black', \r\n        color: 'lime',\r\n        height: '100vh',\r\n        overflow: 'hidden'\r\n    } :  {\r\n        background: '', \r\n        color: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden'\r\n    }\r\n\r\n    const tableStyle = matrix ? {\r\n        background: 'black', \r\n        color: 'lime'\r\n    } :  {\r\n        background: 'white', \r\n        color: 'black'\r\n    }\r\n\r\n    return(\r\n    <div style={landingStyle}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', margin: '10px 25px'}}>\r\n            <h2>Users Table</h2>\r\n            <SwitchButton />\r\n        </div>\r\n        <div className=\"container\" style={landingStyle}>\r\n          <UserTable style={tableStyle} />\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\nimport UserContextProvider from \"./contexts/UserContext\";\nimport LandingPage from './components/landing/landing.component';\n\nconst App = () => (\n  <UserContextProvider>\n    <LandingPage />\n  </UserContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}